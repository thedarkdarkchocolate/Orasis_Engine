cmake_minimum_required(VERSION 3.28)
set(PROJECT_NAME Orasis_)
project(${PROJECT_NAME} VERSION 1.0.0 LANGUAGES CXX)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

# uncomment to set entry point a WinMain
# set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")

 
# Set the source files
file(GLOB_RECURSE SRC_FILES src/*.cpp)
add_executable(${PROJECT_NAME} main.cpp ${SRC_FILES})


# Include project directories
include_directories(include)
include_directories(dependancies)
include_directories(shaders)

# --- Add ImGui Sources ---
set(VULKAN_DIR PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/dependancies/Vulkan)
set(IMGUI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependancies/imgui)
set(GLFW_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependancies/glfw_3)

# --- Add GLM ---
# Create a header-only target for glm
add_library(glm INTERFACE)

# --- Add GLM ---
target_include_directories(glm INTERFACE ${CMAKE_SOURCE_DIR}/dependancies/glm)

# --- Add Vulkan ---
target_include_directories(${PROJECT_NAME} ${VULKAN_DIR}/Include)
target_link_directories(${PROJECT_NAME} ${VULKAN_DIR}/Lib)

# # --- Add GLFW ---
add_library(glfw SHARED IMPORTED)

set_target_properties(glfw PROPERTIES
    IMPORTED_LOCATION "${GLFW_DIR}/Bin/glfw3.dll"
    IMPORTED_IMPLIB   "${GLFW_DIR}/Lib/glfw3dll.lib"
    INTERFACE_INCLUDE_DIRECTORIES "${GLFW_DIR}/include"
)



target_sources(${PROJECT_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/dependancies/vk_impl.cpp)

set(IMGUI_SOURCES
    ${IMGUI_DIR}/imgui.cpp
    ${IMGUI_DIR}/imgui_draw.cpp
    ${IMGUI_DIR}/imgui_widgets.cpp
    ${IMGUI_DIR}/imgui_tables.cpp
    ${IMGUI_DIR}/imgui_demo.cpp

    ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
    ${IMGUI_DIR}/backends/imgui_impl_vulkan.cpp
)

add_library(imgui STATIC ${IMGUI_SOURCES})

target_include_directories(imgui PUBLIC
    ${IMGUI_DIR}
    ${IMGUI_DIR}/backends
    ${VULKAN_DIR}
    ${VULKAN_DIR}/Include
)

# find_package(glfw3 CONFIG REQUIRED)
# find_package(glm CONFIG REQUIRED)
# find_package(imgui CONFIG REQUIRED)


target_link_libraries(imgui PRIVATE vulkan-1 glfw)
target_link_libraries(${PROJECT_NAME} PRIVATE glfw glm vulkan-1 imgui)


# ImGui
# target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/imgui/include)
# target_link_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/imgui/lib)
# target_link_libraries(${PROJECT_NAME} PRIVATE imgui)  # imgui library in lib folder

# # GLFW 
# target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/GLFW/include)
# target_link_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/GLFW/lib)
# target_link_libraries(${PROJECT_NAME} PRIVATE glfw)

# # GLM 
# target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/glm/include)
# target_link_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/third_party/glm/lib)
# target_link_libraries(${PROJECT_NAME} PRIVATE glm)

# Add pthread for UNIX systems
if (UNIX)
   target_link_libraries(${PROJECT_NAME} pthread)
endif (UNIX)

# Custom command to copy glfw3.dll after build (Release mode)
# if (WIN32 AND CMAKE_BUILD_TYPE STREQUAL "Release")
#     add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
#         COMMAND ${CMAKE_COMMAND} -E copy_if_different
#             "${PROJECT_SOURCE_DIR}/third_party/GLFW/glfw3.dll"  # Path to the glfw3.dll
#             "$<TARGET_FILE_DIR:${PROJECT_NAME}>")  # Output directory of the executable
# endif()

set(COMPILE_SHADERS "C:\\Users\\thedarkchoco\\Desktop\\vs_code\\Orasis_Engine\\compileShader.bat")

# Custom target to run the batch file
add_custom_target(RunBatch ALL
    COMMAND ${CMAKE_COMMAND} -E echo "Running batch script..."
    COMMAND ${COMPILE_SHADERS} 
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Executing .bat script"
)

# Make sure the script runs every time you build the main target
add_dependencies(${PROJECT_NAME} RunBatch)



# Configure CPack (for packaging)
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
